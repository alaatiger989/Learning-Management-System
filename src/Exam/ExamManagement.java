/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Exam;

import Course.*;
import User.AdminUserControls;
import User.SelectedUserModel;
import User.UserModel;
import User.UserPrivilegesModel;
import java.awt.Image;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import learningmanagementsystem.MainFrame;

/**
 *
 * @author Alaa_Sayed
 */
public class ExamManagement extends javax.swing.JFrame {

    /**
     * Creates new form CoursesManagement
     */
    DefaultTableModel model ;
    public String courseName , profName , assisName;
    public ExamManagement() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Learning Management System");
        Image img = (new ImageIcon(getClass().getResource("logo2.png"))).getImage();
        setIconImage(img);
        jLabel2.setText("Welcome " + UserModel.getFirstName() + " " + UserModel.getLastName());
        model = (DefaultTableModel) jTable1.getModel();
        model.addColumn("Course Name");
        model.addColumn("Course Prof");
        model.addColumn("Course Assistant");
        model.addColumn("Creator Name");
        
        if(UserModel.getType().equalsIgnoreCase("Admin"))
        {
            getActivatedCourses();
        }
        if(UserModel.getType().equalsIgnoreCase("Professor")){
            getActivatedCoursesForNoAdminUsers("prof_name");
        }
        if(UserModel.getType().equalsIgnoreCase("Assistant")){
            getActivatedCoursesForNoAdminUsers("assis_name");
        }
        if(UserModel.getType().equalsIgnoreCase("Student")){
            
            getActivatedCoursesForStudent();
        }
        
        
        initPrivileges();
        
        
    }

    private void getActivatedCoursesForStudent() {
        Connection myConnObj = null;
        Statement myStatObj = null , myStatObj2 = null;
        ResultSet myResObj = null , myResObj2 = null;
        List<String> registeredCoursesList = new ArrayList();
        
        String query = "Select * from course";
        String query2 = "Select * from student where username = '"+UserModel.getUsername()+"'";
        
        try {
            myConnObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/learning_management_system", "root", "1234");
            myStatObj = myConnObj.createStatement();
            myResObj = myStatObj.executeQuery(query);
            
            
            myStatObj2 = myConnObj.createStatement();
            myResObj2 = myStatObj2.executeQuery(query2);
            
            while(myResObj2.next())
            {
                String registeredCourses = myResObj2.getString("course_regiestered");
                registeredCoursesList.add(registeredCourses);
                
            }
            while (myResObj.next()) {

                    String courseName = myResObj.getString("name");
                    String courseProf = myResObj.getString("prof_name");
                    String courseAssis = myResObj.getString("assis_name");
                    String creatorName = myResObj.getString("creator_name");
                    for(int i = 0 ; i < registeredCoursesList.size() ; i++)
                    {
                        if(registeredCoursesList.get(i).equalsIgnoreCase(courseName))
                    {
                        System.out.println(courseName);
                        model.addRow(new Object[]{courseName , courseProf , courseAssis , creatorName});
                    }
                    }
                    

                            

                  

                }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 0, 0));
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(240, 240, 240));
        jLabel3.setText("Exams Management");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Course/logo2.png"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1470, 10, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(632, 111, 940, 670));

        jButton3.setBackground(new java.awt.Color(0, 51, 153));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(240, 240, 240));
        jButton3.setText("Course Exams");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 660, -1, -1));

        jButton5.setBackground(new java.awt.Color(0, 51, 153));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(240, 240, 240));
        jButton5.setText("Back");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 740, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(240, 240, 240));
        jLabel8.setText("Learning Management System");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 30, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/main_background.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 780));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        dispose();
        new MainFrame().setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        // TODO add your handling code here:
        initializeTextFields();
    }//GEN-LAST:event_jTable1MouseReleased

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        // TODO add your handling code here:
        initializeTextFields();
    }//GEN-LAST:event_jTable1KeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (jTable1.getSelectedRow() != -1) {
            dispose();
            new ExamFrame().setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null  , "Please Select From Table which Course you want....");
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExamManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExamManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExamManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExamManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExamManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    
    private void getActivatedCoursesForNoAdminUsers(String colName) {
        Connection myConnObj = null;
        Statement myStatObj = null;
        ResultSet myResObj = null;

        String query = "Select * from course where "+colName+" = '"+UserModel.getFirstName()+ " " + UserModel.getLastName()+"'";
        try {
            myConnObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/learning_management_system", "root", "1234");
            myStatObj = myConnObj.createStatement();
            myResObj = myStatObj.executeQuery(query);
            while (myResObj.next()) {

                String courseName = myResObj.getString("name");
                String courseProf = myResObj.getString("prof_name");
                String courseAssis = myResObj.getString("assis_name");
                String creatorName = myResObj.getString("creator_name");
                model.addRow(new Object[]{courseName , courseProf , courseAssis , creatorName});
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void getActivatedCourses() {
        Connection myConnObj = null;
        Statement myStatObj = null;
        ResultSet myResObj = null;

        String query = "Select * from course";
        try {
            myConnObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/learning_management_system", "root", "1234");
            myStatObj = myConnObj.createStatement();
            myResObj = myStatObj.executeQuery(query);
            while (myResObj.next()) {

                String courseName = myResObj.getString("name");
                String courseProf = myResObj.getString("prof_name");
                String courseAssis = myResObj.getString("assis_name");
                String creatorName = myResObj.getString("creator_name");
                model.addRow(new Object[]{courseName , courseProf , courseAssis , creatorName});
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void initializeTextFields() {
        int modelRow = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());
        courseName = model.getValueAt(modelRow, 0).toString();
        profName = model.getValueAt(modelRow, 1).toString();
        assisName = model.getValueAt(modelRow, 2).toString();
        
        SelectedCourseModel.setAssisName(assisName);
        SelectedCourseModel.setCourseName(courseName);
        SelectedCourseModel.setProfName(profName);
        
    }

    private void initPrivileges() {
       
        if(UserPrivilegesModel.isViewExam())
        {
            jButton3.setVisible(true);
        }
        
        if(UserPrivilegesModel.isViewExam() || UserPrivilegesModel.isAddExam() ||UserPrivilegesModel.isUpdateExam() || UserPrivilegesModel.isDeleteExam()  )
        {
            jButton3.setVisible(true);
        }
        else{
            jButton3.setVisible(false);
        }
    }
    private void getLastUpdatesOnPrivileges() {
        Connection myConnObj = null;
        Statement myStatObj = null;
        ResultSet myResObj = null;

        String query = "Select * from user where username = '"+UserModel.getUsername()+"'";
        try {
            myConnObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/learning_management_system", "root", "1234");
            myStatObj = myConnObj.createStatement();
            myResObj = myStatObj.executeQuery(query);
            while (myResObj.next()) {
                boolean viewLectures = Boolean.parseBoolean(myResObj.getString("view_lectures"));
                boolean addLecture = Boolean.parseBoolean(myResObj.getString("add_lecture"));
                boolean updateLecture = Boolean.parseBoolean(myResObj.getString("update_lecture"));
                boolean deleteLecture = Boolean.parseBoolean(myResObj.getString("delete_lecture"));
                boolean addAssignment = Boolean.parseBoolean(myResObj.getString("add_assignment"));
                boolean updateAssignment = Boolean.parseBoolean(myResObj.getString("update_assignment"));
                boolean deleteAssignment = Boolean.parseBoolean(myResObj.getString("delete_assignment"));
                boolean addExam = Boolean.parseBoolean(myResObj.getString("add_exam"));
                boolean updateExam = Boolean.parseBoolean(myResObj.getString("update_exam"));
                boolean deleteExam = Boolean.parseBoolean(myResObj.getString("delete_exam"));
                boolean registerCourses = Boolean.parseBoolean(myResObj.getString("register_courses"));
                boolean assignStudentsToExam = Boolean.parseBoolean(myResObj.getString("assign_students_to_exam"));
                boolean correctExams = Boolean.parseBoolean(myResObj.getString("correct_exams"));
                boolean generateResults = Boolean.parseBoolean(myResObj.getString("generate_results"));
                boolean addCourse = Boolean.parseBoolean(myResObj.getString("add_course"));
                boolean updateCourse = Boolean.parseBoolean(myResObj.getString("update_course"));
                boolean deleteCourse = Boolean.parseBoolean(myResObj.getString("delete_course"));
                
                
                UserPrivilegesModel.setAddAssignment(addAssignment);
                UserPrivilegesModel.setAddCourse(addCourse);
                UserPrivilegesModel.setAddExam(addExam);
                UserPrivilegesModel.setAddLecture(addLecture);
                UserPrivilegesModel.setAssignStudentsToExam(assignStudentsToExam);
                UserPrivilegesModel.setCorrectExams(correctExams);
                UserPrivilegesModel.setDeleteAssignment(deleteAssignment);
                UserPrivilegesModel.setDeleteCourse(deleteCourse);
                UserPrivilegesModel.setDeleteExam(deleteExam);
                UserPrivilegesModel.setDeleteLecture(deleteLecture);
                UserPrivilegesModel.setGenerateResults(generateResults);
                UserPrivilegesModel.setRegisterCourses(registerCourses);
                UserPrivilegesModel.setUpdateAssignment(updateAssignment);
                UserPrivilegesModel.setUpdateExam(updateExam);
                UserPrivilegesModel.setUpdateCourse(updateCourse);
                UserPrivilegesModel.setUpdateLecture(updateLecture);
                UserPrivilegesModel.setViewLectures(viewLectures);
                
                
                
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
